name: CI/CD Go Fiber Movie API üöÄ

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-push-deploy:
    name: Build, Test, Push & Deploy
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: movieapp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      IMAGE_NAME: mzainuri/go-fiber-movie-app-api
      CONTAINER_NAME: go-fiber-movie-api
      PORT: 5000

      # Database environment (for local test container)
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: movieapp_test

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Go 1.25.1
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      # 3Ô∏è‚É£ Cache Go modules
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # 4Ô∏è‚É£ Install dependencies & Run Tests
      - name: Run unit tests üß™
        env:
          DATABASE_URL: postgresql://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}?sslmode=disable
        run: |
          echo "Running Go tests..."
          go mod tidy
          go test ./... -v -count=1

      # 5Ô∏è‚É£ Login ke Docker Hub
      - name: Login to Docker Hub üîê
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 6Ô∏è‚É£ Build Docker image
      - name: Build Docker image üê≥
        run: |
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .

      # 7Ô∏è‚É£ Push image ke Docker Hub
      - name: Push Docker image üöÄ
        run: |
          echo "Pushing image to Docker Hub..."
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 8Ô∏è‚É£ Deploy ke Render via Webhook
      - name: Deploy to Render üåê
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_WEBHOOK_URL }}
        run: |
          echo "Triggering Render deployment..."
          curl -X POST "$RENDER_DEPLOY_HOOK"
